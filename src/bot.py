import os
import tempfile
from typing import BinaryIO
from loguru import logger
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from services.rag_service import rag_service
import PyPDF2
import docx
import openpyxl
from pptx import Presentation

# Configure logging
logger.add("bot.log", rotation="500 MB")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data='settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –≤ OVB. –¢–∏ –º–æ–∂–µ—à:\n"
        "1. –ù–∞–¥—Å–∏–ª–∞—Ç–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏\n"
        "2. –ù–∞–¥—Å–∏–ª–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è\n"
        "–Ø –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—é —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è!",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    await update.message.reply_text(
        "–Ø–∫ –º–µ–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:\n\n"
        "üé§ –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: –ó–∞–¥–∞–≤–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º\n"
        "üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏: –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è\n"
        "‚ùì –ü–∏—Ç–∞–Ω–Ω—è: –Ø –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—é –≤–∏–≤—á–µ–Ω–µ, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n\n"
        "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤:\n"
        "- –¢–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ (.txt, .md)\n"
        "- PDF –¥–æ–∫—É–º–µ–Ω—Ç–∏ (.pdf)\n"
        "- Word –¥–æ–∫—É–º–µ–Ω—Ç–∏ (.doc, .docx)\n"
        "- Excel —Ñ–∞–π–ª–∏ (.xlsx)\n"
        "- PowerPoint –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó (.pptx)"
    )

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle settings button click."""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìö –î–æ–¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è", callback_data='add_docs')],
        [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏", callback_data='delete_docs')],
        [InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–∏ –∑–Ω–∞–Ω—å", callback_data='stats')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=reply_markup
    )

async def handle_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle settings menu callbacks."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'add_docs':
        await query.edit_message_text(
            "üìö –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è.\n\n"
            "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:\n"
            "- –¢–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ (.txt, .md)\n"
            "- PDF –¥–æ–∫—É–º–µ–Ω—Ç–∏ (.pdf)\n"
            "- Word –¥–æ–∫—É–º–µ–Ω—Ç–∏ (.doc, .docx)\n"
            "- Excel —Ñ–∞–π–ª–∏ (.xlsx)\n"
            "- PowerPoint –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó (.pptx)"
        )
    elif query.data == 'delete_docs':
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
        await query.edit_message_text("üóë –í—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å.")
    elif query.data == 'stats':
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await query.edit_message_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–∏ –∑–Ω–∞–Ω—å –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º.")

def extract_text_from_pdf(file_path: str) -> str:
    """Extract text from PDF file."""
    text = ""
    with open(file_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        for page in reader.pages:
            text += page.extract_text() + "\n"
    return text

def extract_text_from_docx(file_path: str) -> str:
    """Extract text from DOCX file."""
    doc = docx.Document(file_path)
    return "\n".join([paragraph.text for paragraph in doc.paragraphs])

def extract_text_from_xlsx(file_path: str) -> str:
    """Extract text from XLSX file."""
    wb = openpyxl.load_workbook(file_path)
    text = []
    for sheet in wb.sheetnames:
        ws = wb[sheet]
        for row in ws.rows:
            row_text = " ".join(str(cell.value) for cell in row if cell.value)
            if row_text:
                text.append(row_text)
    return "\n".join(text)

def extract_text_from_pptx(file_path: str) -> str:
    """Extract text from PPTX file."""
    prs = Presentation(file_path)
    text = []
    for slide in prs.slides:
        for shape in slide.shapes:
            if hasattr(shape, "text"):
                text.append(shape.text)
    return "\n".join(text)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle voice messages."""
    try:
        # Send initial status
        status_message = await update.message.reply_text("üéß –û–±—Ä–æ–±–ª—è—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        
        # Get voice file
        voice = update.message.voice
        voice_file = await context.bot.get_file(voice.file_id)
        
        # Download voice file to temporary location
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
            await voice_file.download_to_drive(temp_file.name)
            
            # Process audio using RAG service
            result = await rag_service.process_audio_query(temp_file.name)
            
            # Send transcription and response
            await status_message.edit_text(
                f"üéØ –Ø –ø–æ—á—É–≤: {result['transcription']}\n\n"
                f"ü§ñ –ú–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {result['response']}"
            )
            
        # Cleanup temporary file
        os.unlink(temp_file.name)
        
    except Exception as e:
        logger.error(f"Error processing voice message: {str(e)}")
        await update.message.reply_text(
            "üòï –í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. "
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–æ —á—ñ—Ç–∫–æ."
        )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle document messages."""
    try:
        # Check if document format is supported
        document = update.message.document
        file_name = document.file_name.lower()
        supported_formats = ('.txt', '.md', '.pdf', '.doc', '.docx', '.xlsx', '.pptx')
        
        if not any(file_name.endswith(fmt) for fmt in supported_formats):
            await update.message.reply_text(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ñ–∞–π–ª–∏ –ª–∏—à–µ –≤ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:\n"
                "- –¢–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ (.txt, .md)\n"
                "- PDF –¥–æ–∫—É–º–µ–Ω—Ç–∏ (.pdf)\n"
                "- Word –¥–æ–∫—É–º–µ–Ω—Ç–∏ (.doc, .docx)\n"
                "- Excel —Ñ–∞–π–ª–∏ (.xlsx)\n"
                "- PowerPoint –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó (.pptx)"
            )
            return
            
        # Send initial status
        status_message = await update.message.reply_text("üìö –û–±—Ä–æ–±–ª—è—é –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç...")
        
        # Get document file
        doc_file = await context.bot.get_file(document.file_id)
        
        # Download and process document
        with tempfile.NamedTemporaryFile(suffix=os.path.splitext(file_name)[1], delete=False) as temp_file:
            await doc_file.download_to_drive(temp_file.name)
            
            # Extract text based on file format
            if file_name.endswith('.pdf'):
                text = extract_text_from_pdf(temp_file.name)
            elif file_name.endswith(('.doc', '.docx')):
                text = extract_text_from_docx(temp_file.name)
            elif file_name.endswith('.xlsx'):
                text = extract_text_from_xlsx(temp_file.name)
            elif file_name.endswith('.pptx'):
                text = extract_text_from_pptx(temp_file.name)
            else:  # txt or md
                with open(temp_file.name, 'r', encoding='utf-8') as f:
                    text = f.read()
            
            # Process document using RAG service
            await rag_service.process_document(text, document.file_id)
            
            await status_message.edit_text(
                "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ! –Ø –≤–∏–≤—á–∏–≤ –π–æ–≥–æ –≤–º—ñ—Å—Ç."
            )
            
        # Cleanup temporary file
        os.unlink(temp_file.name)
        
    except Exception as e:
        logger.error(f"Error processing document: {str(e)}")
        await update.message.reply_text(
            "üòï –í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –¥–æ–∫—É–º–µ–Ω—Ç–∞. "
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )

def main():
    """Start the bot."""
    # Create application
    application = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(settings, pattern='^settings$'))
    application.add_handler(CallbackQueryHandler(handle_settings_callback, pattern='^(add_docs|delete_docs|stats)$'))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    # Start the bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 