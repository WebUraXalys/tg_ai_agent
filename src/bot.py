import os
import tempfile
import json
from typing import BinaryIO, Dict, Any
from loguru import logger
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from services.rag_service import rag_service
from services.database_service import database_service
import PyPDF2
import docx
import openpyxl
from pptx import Presentation

# Conversation states
AWAITING_INPUT = 1

# Configure logging
logger.add("bot.log", rotation="500 MB")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data='settings')],
        [InlineKeyboardButton("üë• –ö–ª—ñ—î–Ω—Ç–∏", callback_data='clients')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –≤ OVB. –¢–∏ –º–æ–∂–µ—à:\n"
        "1. –ù–∞–¥—Å–∏–ª–∞—Ç–∏ –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏\n"
        "2. –ù–∞–¥—Å–∏–ª–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è\n"
        "3. –ö–µ—Ä—É–≤–∞—Ç–∏ –±–∞–∑–æ—é –∫–ª—ñ—î–Ω—Ç—ñ–≤\n"
        "–Ø –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—é —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è!",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    await update.message.reply_text(
        "–Ø–∫ –º–µ–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:\n\n"
        "üé§ –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: –ó–∞–¥–∞–≤–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º\n"
        "üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏: –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è\n"
        "‚ùì –ü–∏—Ç–∞–Ω–Ω—è: –Ø –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—é –≤–∏–≤—á–µ–Ω–µ, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n\n"
        "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤:\n"
        "- –¢–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ (.txt, .md)\n"
        "- PDF –¥–æ–∫—É–º–µ–Ω—Ç–∏ (.pdf)\n"
        "- Word –¥–æ–∫—É–º–µ–Ω—Ç–∏ (.doc, .docx)\n"
        "- Excel —Ñ–∞–π–ª–∏ (.xlsx)\n"
        "- PowerPoint –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó (.pptx)"
    )

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle settings button click."""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìö –î–æ–¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è", callback_data='add_docs')],
        [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏", callback_data='delete_docs')],
        [InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–∏ –∑–Ω–∞–Ω—å", callback_data='stats')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=reply_markup
    )

async def handle_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle settings menu callbacks."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'add_docs':
        await query.edit_message_text(
            "üìö –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è.\n\n"
            "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:\n"
            "- –¢–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ (.txt, .md)\n"
            "- PDF –¥–æ–∫—É–º–µ–Ω—Ç–∏ (.pdf)\n"
            "- Word –¥–æ–∫—É–º–µ–Ω—Ç–∏ (.doc, .docx)\n"
            "- Excel —Ñ–∞–π–ª–∏ (.xlsx)\n"
            "- PowerPoint –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó (.pptx)"
        )
    elif query.data == 'delete_docs':
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
        await query.edit_message_text("üóë –í—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å.")
    elif query.data == 'stats':
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await query.edit_message_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–∏ –∑–Ω–∞–Ω—å –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º.")

def extract_text_from_pdf(file_path: str) -> str:
    """Extract text from PDF file."""
    text = ""
    with open(file_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        for page in reader.pages:
            text += page.extract_text() + "\n"
    return text

def extract_text_from_docx(file_path: str) -> str:
    """Extract text from DOCX file."""
    doc = docx.Document(file_path)
    return "\n".join([paragraph.text for paragraph in doc.paragraphs])

def extract_text_from_xlsx(file_path: str) -> str:
    """Extract text from XLSX file."""
    wb = openpyxl.load_workbook(file_path)
    text = []
    for sheet in wb.sheetnames:
        ws = wb[sheet]
        for row in ws.rows:
            row_text = " ".join(str(cell.value) for cell in row if cell.value)
            if row_text:
                text.append(row_text)
    return "\n".join(text)

def extract_text_from_pptx(file_path: str) -> str:
    """Extract text from PPTX file."""
    prs = Presentation(file_path)
    text = []
    for slide in prs.slides:
        for shape in slide.shapes:
            if hasattr(shape, "text"):
                text.append(shape.text)
    return "\n".join(text)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle voice messages."""
    try:
        # Send initial status
        status_message = await update.message.reply_text("üéß –û–±—Ä–æ–±–ª—è—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        
        # Get voice file
        voice = update.message.voice
        voice_file = await context.bot.get_file(voice.file_id)
        
        # Download voice file to temporary location
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
            await voice_file.download_to_drive(temp_file.name)
            
            # Process audio using RAG service
            result = await rag_service.process_audio_query(temp_file.name)
            
            # Extract client info from the response
            client_info = extract_client_info(result['response'])
            
            # Store client info in context for later use
            if client_info:
                context.user_data['current_client_info'] = client_info
                logger.info(f"Extracted client info: {client_info}")
            
            # Add buttons for saving/editing client info
            keyboard = [
                [
                    InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞", callback_data='save_client'),
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ", callback_data='edit_client')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Send transcription and response
            await status_message.edit_text(
                f"üéØ –Ø –ø–æ—á—É–≤: {result['transcription']}\n\n"
                f"ü§ñ –ú–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {result['response']}",
                reply_markup=reply_markup
            )
            
        # Cleanup temporary file
        os.unlink(temp_file.name)
        
    except Exception as e:
        logger.error(f"Error processing voice message: {str(e)}")
        await update.message.reply_text(
            "üòï –í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. "
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–æ —á—ñ—Ç–∫–æ."
        )

def extract_client_info(response_text: str) -> Dict[str, Any]:
    """Extract client information from the response text"""
    try:
        client_info = {}
        lines = response_text.split('\n')
        
        # Initialize description collection
        description_lines = []
        collecting_description = False
        
        for line in lines:
            line = line.strip()
            
            # Skip empty lines
            if not line:
                continue
                
            # Handle client name
            if any(x in line.lower() for x in ['–∫–ª—ñ—î–Ω—Ç:', '—ñ–º º—è:', "—ñ–º'—è:", '—ñ–º—è:']):
                client_info['full_name'] = line.split(':', 1)[1].strip()
            
            # Handle age
            elif '–≤—ñ–∫:' in line.lower():
                age_text = line.split(':', 1)[1].strip()
                try:
                    client_info['age'] = int(''.join(filter(str.isdigit, age_text)))
                except ValueError:
                    logger.warning(f"Could not parse age from: {age_text}")
            
            # Handle meeting date
            elif '–¥–∞—Ç–∞:' in line.lower():
                client_info['meeting_date'] = line.split(':', 1)[1].strip()
            
            # Handle product type
            elif '–ø—Ä–æ–¥—É–∫—Ç:' in line.lower():
                client_info['product_type'] = line.split(':', 1)[1].strip()
            
            # Handle goal
            elif '—Ü—ñ–ª—å:' in line.lower():
                client_info['goal'] = line.split(':', 1)[1].strip()
            
            # Start collecting description
            elif any(x in line.lower() for x in ['–æ–ø–∏—Å:', '–æ–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞:', '–¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:']):
                collecting_description = True
                continue
            
            # Stop collecting description if we hit a section marker
            elif line.startswith(('###', '---', 'üéØ', 'üí°', 'üìù')):
                collecting_description = False
            
            # Collect description lines
            elif collecting_description:
                description_lines.append(line)
        
        # Join description lines if we collected any
        if description_lines:
            client_info['description'] = ' '.join(description_lines).strip()
        
        # Validate required fields
        required_fields = ['full_name', 'age', 'product_type', 'goal']
        if all(field in client_info for field in required_fields):
            logger.info(f"Successfully extracted client info: {client_info}")
            return client_info
            
        missing_fields = [field for field in required_fields if field not in client_info]
        logger.warning(f"Missing required fields: {missing_fields}")
        return None
        
    except Exception as e:
        logger.error(f"Error extracting client info: {str(e)}")
        return None

async def handle_clients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle clients button click"""
    query = update.callback_query
    await query.answer()
    
    try:
        # Get all clients from database
        clients = await database_service.get_all_clients()
        
        if not clients:
            await query.edit_message_text(
                "üìù –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
            )
            return
        
        # Format client list
        client_text = "üìã –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n\n"
        for client in clients:
            client_text += (
                f"üë§ {client['full_name']}\n"
                f"üìÖ –í—ñ–∫: {client['age']}\n"
                f"üéØ –¶—ñ–ª—å: {client['goal']}\n"
                f"üíº –ü—Ä–æ–¥—É–∫—Ç: {client['product_type']}\n"
                f"üìù –û–ø–∏—Å: {client['description'][:100]}...\n\n"
            )
        
        # Add navigation buttons if needed
        keyboard = [[InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data='clients')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            client_text,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error getting clients: {str(e)}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )

async def handle_client_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle client-related button actions"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'save_client':
        client_info = context.user_data.get('current_client_info')
        if not client_info:
            await query.message.reply_text(
                "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
            )
            return
            
        try:
            # Validate required fields
            required_fields = ['full_name', 'age', 'product_type', 'goal']
            missing_fields = [field for field in required_fields if field not in client_info]
            
            if missing_fields:
                await query.message.reply_text(
                    f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: {', '.join(missing_fields)}.\n"
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞."
                )
                return
            
            # Save client data
            client_id = await database_service.save_client(client_info)
            
            # Send success message with client details
            success_message = (
                f"‚úÖ –î–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
                f"üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞:\n"
                f"üÜî ID: {client_id}\n"
                f"üë§ –Ü–º'—è: {client_info['full_name']}\n"
                f"üìÖ –í—ñ–∫: {client_info['age']}\n"
                f"üíº –ü—Ä–æ–¥—É–∫—Ç: {client_info['product_type']}\n"
                f"üéØ –¶—ñ–ª—å: {client_info['goal']}\n"
            )
            
            if client_info.get('description'):
                success_message += f"üìù –û–ø–∏—Å: {client_info['description']}\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data='edit_saved_client'),
                    InlineKeyboardButton("üë• –í—Å—ñ –∫–ª—ñ—î–Ω—Ç–∏", callback_data='clients')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Send success message as a new message
            await query.message.reply_text(success_message, reply_markup=reply_markup)
            
            # Also update the original message to show it was processed
            await query.edit_message_text(
                query.message.text + "\n\n‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!"
            )
            
            # Clear the stored client info after successful save
            context.user_data['current_client_info'] = None
            
        except Exception as e:
            logger.error(f"Error saving client: {str(e)}")
            await query.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
    
    elif query.data == 'edit_client' or query.data == 'edit_saved_client':
        client_info = context.user_data.get('current_client_info')
        if not client_info:
            await query.message.reply_text(
                "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
            )
            return
        
        # Show current values and edit options
        current_values = (
            f"üìã –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞:\n\n"
            f"üë§ –Ü–º'—è: {client_info.get('full_name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÖ –í—ñ–∫: {client_info.get('age', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üéØ –¶—ñ–ª—å: {client_info.get('goal', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üíº –ü—Ä–æ–¥—É–∫—Ç: {client_info.get('product_type', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìù –û–ø–∏—Å: {client_info.get('description', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:"
        )
        
        edit_keyboard = [
            [
                InlineKeyboardButton("üë§ –Ü–º'—è", callback_data='edit_name'),
                InlineKeyboardButton("üìÖ –í—ñ–∫", callback_data='edit_age')
            ],
            [
                InlineKeyboardButton("üéØ –¶—ñ–ª—å", callback_data='edit_goal'),
                InlineKeyboardButton("üíº –ü—Ä–æ–¥—É–∫—Ç", callback_data='edit_product')
            ],
            [InlineKeyboardButton("üìù –û–ø–∏—Å", callback_data='edit_description')],
            [
                InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data='save_changes'),
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel_edit')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(edit_keyboard)
        
        await query.message.reply_text(current_values, reply_markup=reply_markup)

async def handle_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle editing specific client fields"""
    query = update.callback_query
    await query.answer()
    
    field_map = {
        'edit_name': ('full_name', "üë§ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞:"),
        'edit_age': ('age', "üìÖ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –≤—ñ–∫ –∫–ª—ñ—î–Ω—Ç–∞:"),
        'edit_goal': ('goal', "üéØ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–ª—å –∫–ª—ñ—î–Ω—Ç–∞:"),
        'edit_product': ('product_type', "üíº –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É:"),
        'edit_description': ('description', "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞:")
    }
    
    if query.data.startswith('edit_'):
        field = query.data.replace('edit_', '')
        if field in [k.replace('edit_', '') for k in field_map.keys()]:
            field_name, prompt = field_map[f'edit_{field}']
            context.user_data['editing_field'] = field_name
            
            # Show current value if exists
            client_info = context.user_data.get('current_client_info', {})
            current_value = client_info.get(field_name, '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
            
            keyboard = [[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel_edit')
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"{prompt}\n\n"
                f"–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {current_value}\n\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                reply_markup=reply_markup
            )
            return AWAITING_INPUT
    
    elif query.data == 'cancel_edit':
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", callback_data='edit_client')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    
    return ConversationHandler.END

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input for editing"""
    field = context.user_data.get('editing_field')
    if not field:
        return ConversationHandler.END
    
    text = update.message.text
    client_info = context.user_data.get('current_client_info', {})
    
    if field == 'age':
        try:
            client_info[field] = int(text)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (—á–∏—Å–ª–æ)",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data=f'edit_age')
                ]])
            )
            return AWAITING_INPUT
    else:
        client_info[field] = text
    
    context.user_data['current_client_info'] = client_info
    
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —â–µ", callback_data='edit_client'),
            InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data='save_changes')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ –ó–Ω–∞—á–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n"
        f"–ü–æ–ª–µ: {field}\n"
        f"–ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {text}",
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle document messages."""
    try:
        # Check if document format is supported
        document = update.message.document
        file_name = document.file_name.lower()
        supported_formats = ('.txt', '.md', '.pdf', '.doc', '.docx', '.xlsx', '.pptx')
        
        if not any(file_name.endswith(fmt) for fmt in supported_formats):
            await update.message.reply_text(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ñ–∞–π–ª–∏ –ª–∏—à–µ –≤ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:\n"
                "- –¢–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ (.txt, .md)\n"
                "- PDF –¥–æ–∫—É–º–µ–Ω—Ç–∏ (.pdf)\n"
                "- Word –¥–æ–∫—É–º–µ–Ω—Ç–∏ (.doc, .docx)\n"
                "- Excel —Ñ–∞–π–ª–∏ (.xlsx)\n"
                "- PowerPoint –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó (.pptx)"
            )
            return
            
        # Send initial status
        status_message = await update.message.reply_text("üìö –û–±—Ä–æ–±–ª—è—é –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç...")
        
        # Get document file
        doc_file = await context.bot.get_file(document.file_id)
        
        # Download and process document
        with tempfile.NamedTemporaryFile(suffix=os.path.splitext(file_name)[1], delete=False) as temp_file:
            await doc_file.download_to_drive(temp_file.name)
            
            # Extract text based on file format
            if file_name.endswith('.pdf'):
                text = extract_text_from_pdf(temp_file.name)
            elif file_name.endswith(('.doc', '.docx')):
                text = extract_text_from_docx(temp_file.name)
            elif file_name.endswith('.xlsx'):
                text = extract_text_from_xlsx(temp_file.name)
            elif file_name.endswith('.pptx'):
                text = extract_text_from_pptx(temp_file.name)
            else:  # txt or md
                with open(temp_file.name, 'r', encoding='utf-8') as f:
                    text = f.read()
            
            # Process document using RAG service
            await rag_service.process_document(text, document.file_id)
            
            await status_message.edit_text(
                "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ! –Ø –≤–∏–≤—á–∏–≤ –π–æ–≥–æ –≤–º—ñ—Å—Ç."
            )
            
        # Cleanup temporary file
        os.unlink(temp_file.name)
        
    except Exception as e:
        logger.error(f"Error processing document: {str(e)}")
        await update.message.reply_text(
            "üòï –í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –¥–æ–∫—É–º–µ–Ω—Ç–∞. "
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )

def main():
    """Start the bot."""
    # Create application
    application = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(settings, pattern='^settings$'))
    application.add_handler(CallbackQueryHandler(handle_settings_callback, pattern='^(add_docs|delete_docs|stats)$'))
    application.add_handler(CallbackQueryHandler(handle_clients, pattern='^clients$'))
    application.add_handler(CallbackQueryHandler(handle_client_action, pattern='^(save_client|edit_client|save_changes)$'))
    
    # Add handler for text messages during editing
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_text_input,
        block=False
    ))
    
    # Add handler for edit field callbacks
    application.add_handler(CallbackQueryHandler(
        handle_edit_field,
        pattern='^(edit_|cancel_edit)'
    ))
    
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    # Start the bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 